'use strict';

var async = require('async');

var Model = function(data) {
	var self = this;
	self.model = {};
	self.data = {};
	self.load = function(data) {
		console.log('data in class', data);
		self.data = data;
	};
	self.define = function(model) {
		self.model = model;
	};
	self.safeToString = function(x) {
		switch (typeof x) {
			case 'object':
				return 'object';
			case 'function':
				return 'function';
			default:
				return x + '';
		}
	};
	self.validate = function(cb) {
		var validators = {},
			dataToValidate = [],
			result = {
				valid: true,
				messages: {}
			},
			validChecker = [];
		self.model.model.forEach(function(item) {
			if ('validation' in item && 'async' in item.validation) {
				validators[item.name] = item.validation.async;
			}
		});
		for (var key in self.data) {
			if (key in validators) {
				dataToValidate.push({
					name: key,
					data: self.data[key],
					validation: validators[key]
				});
			}
		}
		async.each(dataToValidate, function(item, callback) {
			item.validation(item.data, function(err, validationObject) {
				if (validChecker.indexOf(validationObject.valid) <= 0) {
					validChecker.push(validationObject.valid);
				}
				if (!validationObject.valid) {
					//result.messages.push(validationObject.message);
					result.messages[item.name] = validationObject.message;
				}
				callback(err);
			})
		}, function(err, validationResult) {
			if (validChecker.indexOf(false) >= 0) {
				result.valid = false;
			}
			return cb(result);
		});
	};
	self.clientValidationRules = function() {
		var validators = {};
		self.model.model.forEach(function(item) {
			if ('validation' in item && 'rules' in item.validation) {
				validators[item.name] = {
					identifier: item.name,
					rules: item.validation.rules
				};
			}
		});
		return validators;
	}
};

module.exports = Model;
